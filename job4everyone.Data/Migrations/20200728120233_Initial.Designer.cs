// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using job4everyone.Data;

namespace job4everyone.Data.Migrations
{
    [DbContext(typeof(Job4EveryoneDbContext))]
    [Migration("20200728120233_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("job4everyone.Models.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobPositionId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("job4everyone.Models.AdvertisementCandidate", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementId", "CandidateId");

                    b.HasIndex("CandidateId");

                    b.ToTable("AdvertisementsCandidates");
                });

            modelBuilder.Entity("job4everyone.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("job4everyone.Models.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("job4everyone.Models.JobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("JobPositions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(3768),
                            Name = "QA",
                            UpdatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(4101)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(4810),
                            Name = "Developer",
                            UpdatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(4820)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(4840),
                            Name = "Manager",
                            UpdatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(4841)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(4842),
                            Name = "DevOps",
                            UpdatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(4842)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(4843),
                            Name = "PM",
                            UpdatedAt = new DateTime(2020, 7, 28, 12, 2, 32, 924, DateTimeKind.Utc).AddTicks(4844)
                        });
                });

            modelBuilder.Entity("job4everyone.Models.Advertisement", b =>
                {
                    b.HasOne("job4everyone.Models.Employer", "Employer")
                        .WithMany("Advertisements")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("job4everyone.Models.JobPosition", "JobPosition")
                        .WithMany("Advertisements")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("job4everyone.Models.AdvertisementCandidate", b =>
                {
                    b.HasOne("job4everyone.Models.Advertisement", "Advertisement")
                        .WithMany("Candidates")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("job4everyone.Models.Candidate", "Candidate")
                        .WithMany("Advertisements")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
